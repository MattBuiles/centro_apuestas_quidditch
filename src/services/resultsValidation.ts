/**
 * Sistema de Validaci√≥n para Guardado de Resultados
 * Prueba que los resultados se guarden correctamente con cronolog√≠a completa
 */

import { matchResultsService } from './matchResultsService';
import { liveMatchSimulator } from './liveMatchSimulator';
import { virtualTimeManager } from './virtualTimeManager';

export class ResultsValidationSystem {
  
  /**
   * Ejecuta validaci√≥n completa del sistema de resultados
   */
  async executeFullValidation(): Promise<void> {
    console.log('üß™ === VALIDACI√ìN COMPLETA DEL SISTEMA DE RESULTADOS ===');
    console.log('');

    // Test 1: Validar servicio de resultados
    await this.validateMatchResultsService();
    
    // Test 2: Validar simulaci√≥n en vivo
    await this.validateLiveSimulation();
    
    // Test 3: Validar simulaci√≥n autom√°tica
    await this.validateAutomaticSimulation();
    
    // Test 4: Validar persistencia
    await this.validatePersistence();
    
    // Test 5: Validar estad√≠sticas
    await this.validateStatistics();

    console.log('');
    console.log('‚úÖ === VALIDACI√ìN COMPLETADA ===');
    console.log('üìä Sistema de guardado de resultados funcionando correctamente');
  }

  /**
   * Test 1: Validar servicio de resultados
   */
  private async validateMatchResultsService(): Promise<void> {
    console.log('üß™ Test 1: Validando MatchResultsService...');
    
    try {
      // Verificar que el servicio est√© disponible
      const stats = matchResultsService.getResultsStatistics();
      console.log(`  üìä Estad√≠sticas actuales:`, stats);
      
      // Verificar que podemos obtener resultados
      const allResults = matchResultsService.getAllResults();
      console.log(`  üìã Resultados almacenados: ${allResults.length}`);
      
      // Mostrar algunos resultados recientes
      const recentResults = matchResultsService.getRecentResults(3);
      console.log(`  üïí Resultados recientes: ${recentResults.length}`);
      
      recentResults.forEach((result, index) => {
        console.log(`    ${index + 1}. ${result.homeTeam.name} ${result.finalScore.home} - ${result.finalScore.away} ${result.awayTeam.name}`);
        console.log(`       üìà ${result.statistics.totalEvents} eventos, ${result.matchDuration} min, ${result.snitchCaught ? '‚ú® Snitch' : '‚ùå Sin Snitch'}`);
      });
      
      console.log('  ‚úÖ MatchResultsService funcionando correctamente');
    } catch (error) {
      console.error('  ‚ùå Error en MatchResultsService:', error);
    }
    
    console.log('');
  }

  /**
   * Test 2: Validar simulaci√≥n en vivo
   */
  private async validateLiveSimulation(): Promise<void> {
    console.log('üß™ Test 2: Validando simulaci√≥n en vivo...');
    
    try {      // Crear equipos de prueba
      const homeTeam = {
        id: 'test-home',
        name: 'Gryffindor Test',
        league: 'Test League',
        fuerzaAtaque: 75,
        fuerzaDefensa: 70,
        attackStrength: 75,
        defenseStrength: 70,
        chasersSkill: 75,
        chaserSkill: 75,
        beaterSkill: 70,
        beatersSkill: 70,
        keeperSkill: 80,
        seekerSkill: 85
      };

      const awayTeam = {
        id: 'test-away',
        name: 'Slytherin Test',
        league: 'Test League',
        fuerzaAtaque: 80,
        fuerzaDefensa: 75,
        attackStrength: 80,
        defenseStrength: 75,
        chasersSkill: 80,
        chaserSkill: 80,
        beaterSkill: 75,
        beatersSkill: 75,
        keeperSkill: 75,
        seekerSkill: 80
      };

      // Crear match de prueba
      const testMatch = {
        id: `test-match-${Date.now()}`,
        localId: homeTeam.id,
        visitanteId: awayTeam.id,
        homeTeamId: homeTeam.id,
        awayTeamId: awayTeam.id,
        fecha: new Date(),
        date: new Date().toISOString(),
        time: '15:00',
        venue: 'Test Stadium',
        status: 'live' as const,
        eventos: []
      };

      console.log(`  üèÅ Iniciando simulaci√≥n: ${homeTeam.name} vs ${awayTeam.name}`);
      
      // Iniciar simulaci√≥n
      const matchState = liveMatchSimulator.startLiveMatch(
        testMatch,
        homeTeam,
        awayTeam,
        30 // 30 minutos para test r√°pido
      );

      console.log(`  ‚è±Ô∏è Simulaci√≥n iniciada, ID: ${matchState.matchId}`);
      
      // Simular algunos minutos
      let iterations = 0;
      const maxIterations = 10; // M√°ximo 10 segundos de simulaci√≥n
      
      while (matchState.isActive && iterations < maxIterations) {
        await new Promise(resolve => setTimeout(resolve, 1000)); // Esperar 1 segundo
        
        const currentState = liveMatchSimulator.getMatchState(testMatch.id);
        if (currentState) {
          console.log(`  üìä Minuto ${currentState.minuto}: ${currentState.golesLocal} - ${currentState.golesVisitante} (${currentState.eventos.length} eventos)`);
          
          if (!currentState.isActive) {
            console.log('  üèÅ Partido terminado autom√°ticamente');
            
            // Guardar resultado detallado
            liveMatchSimulator.saveDetailedMatchResult(testMatch.id, testMatch as any, homeTeam, awayTeam);
            break;
          }
        }
        
        iterations++;
      }

      // Si no termin√≥ autom√°ticamente, terminarlo manualmente
      if (matchState.isActive) {
        liveMatchSimulator.stopMatch(testMatch.id);
        console.log('  ‚èπÔ∏è Simulaci√≥n detenida manualmente');
      }

      console.log('  ‚úÖ Simulaci√≥n en vivo completada');
    } catch (error) {
      console.error('  ‚ùå Error en simulaci√≥n en vivo:', error);
    }
    
    console.log('');
  }

  /**
   * Test 3: Validar simulaci√≥n autom√°tica
   */
  private async validateAutomaticSimulation(): Promise<void> {
    console.log('üß™ Test 3: Validando simulaci√≥n autom√°tica...');
    
    try {
      // Obtener estado actual del virtual time manager
      const state = virtualTimeManager.getState();
      
      if (state.temporadaActiva) {
        console.log(`  üìÖ Temporada activa: ${state.temporadaActiva.name}`);
        console.log(`  üìä Partidos totales: ${state.temporadaActiva.partidos.length}`);
        console.log(`  ‚úÖ Partidos simulados: ${state.partidosSimulados.size}`);
        
        // Obtener algunos partidos finalizados
        const partidosFinalizados = state.temporadaActiva.partidos
          .filter(p => p.status === 'finished')
          .slice(0, 3);

        console.log(`  üèÜ Partidos finalizados: ${partidosFinalizados.length}`);
        
        partidosFinalizados.forEach((partido, index) => {
          const equipoLocal = state.temporadaActiva!.equipos.find(e => e.id === partido.localId);
          const equipoVisitante = state.temporadaActiva!.equipos.find(e => e.id === partido.visitanteId);
          
          console.log(`    ${index + 1}. ${equipoLocal?.name || 'Unknown'} ${partido.homeScore || 0} - ${partido.awayScore || 0} ${equipoVisitante?.name || 'Unknown'}`);
          console.log(`       üìà ${partido.events?.length || 0} eventos, ${partido.currentMinute || 0} min`);
        });
        
        console.log('  ‚úÖ Simulaci√≥n autom√°tica funcionando');
      } else {
        console.log('  ‚ö†Ô∏è No hay temporada activa');
      }
    } catch (error) {
      console.error('  ‚ùå Error en simulaci√≥n autom√°tica:', error);
    }
    
    console.log('');
  }

  /**
   * Test 4: Validar persistencia
   */
  private async validatePersistence(): Promise<void> {
    console.log('üß™ Test 4: Validando persistencia de datos...');
    
    try {
      // Verificar localStorage
      const storedResults = localStorage.getItem('quidditch_match_results');
      const storedCache = localStorage.getItem('quidditch_results_cache');
      
      console.log(`  üíæ Datos en localStorage:`);
      console.log(`    - Resultados: ${storedResults ? 'S√≠' : 'No'}`);
      console.log(`    - Cache: ${storedCache ? 'S√≠' : 'No'}`);
      
      if (storedResults) {
        const results = JSON.parse(storedResults);
        console.log(`    - Cantidad de resultados: ${results.length}`);
      }
      
      if (storedCache) {
        const cache = JSON.parse(storedCache);
        console.log(`    - √öltima actualizaci√≥n: ${cache.lastUpdated}`);
        console.log(`    - Total partidos: ${cache.totalMatches}`);
      }
      
      // Verificar que los datos persisten entre recargas
      const beforeReloadCount = matchResultsService.getAllResults().length;
      console.log(`  üìä Resultados antes de validaci√≥n: ${beforeReloadCount}`);
      
      console.log('  ‚úÖ Persistencia funcionando correctamente');
    } catch (error) {
      console.error('  ‚ùå Error en persistencia:', error);
    }
    
    console.log('');
  }

  /**
   * Test 5: Validar estad√≠sticas
   */
  private async validateStatistics(): Promise<void> {
    console.log('üß™ Test 5: Validando estad√≠sticas...');
    
    try {
      const stats = matchResultsService.getResultsStatistics();
      
      console.log(`  üìä Estad√≠sticas generales:`);
      console.log(`    - Total partidos: ${stats.totalMatches}`);
      console.log(`    - Duraci√≥n promedio: ${stats.averageDuration} min`);
      console.log(`    - Snitches atrapadas: ${stats.snitchCaughtPercentage}%`);
      console.log(`    - Goles promedio: ${stats.averageGoalsPerMatch}`);
      
      // Verificar estad√≠sticas de partidos individuales
      const recentResults = matchResultsService.getRecentResults(3);
      
      recentResults.forEach((result, index) => {
        console.log(`  üìà Estad√≠sticas detalladas ${index + 1}:`);
        console.log(`    - Eventos totales: ${result.statistics.totalEvents}`);
        console.log(`    - Goles Quaffle: ${result.statistics.quaffleGoals.home + result.statistics.quaffleGoals.away}`);
        console.log(`    - Faltas: ${result.statistics.fouls.home + result.statistics.fouls.away}`);
        console.log(`    - Dominancia: ${JSON.stringify(result.statistics.dominanceByPeriod)}`);
      });
      
      console.log('  ‚úÖ Estad√≠sticas calcul√°ndose correctamente');
    } catch (error) {
      console.error('  ‚ùå Error en estad√≠sticas:', error);
    }
    
    console.log('');
  }

  /**
   * Genera un resumen del estado actual del sistema
   */
  generateSystemSummary(): void {
    console.log('üìã === RESUMEN DEL SISTEMA DE RESULTADOS ===');
    
    const stats = matchResultsService.getResultsStatistics();
    const allResults = matchResultsService.getAllResults();
    const state = virtualTimeManager.getState();
    
    console.log('üìä Estado General:');
    console.log(`  - Resultados detallados guardados: ${allResults.length}`);
    console.log(`  - Duraci√≥n promedio de partidos: ${stats.averageDuration} minutos`);
    console.log(`  - Partidos con Snitch atrapada: ${stats.snitchCaughtPercentage}%`);
    
    if (state.temporadaActiva) {
      const partidosFinalizados = state.temporadaActiva.partidos.filter(p => p.status === 'finished');
      console.log(`  - Partidos de temporada finalizados: ${partidosFinalizados.length}`);
      console.log(`  - Partidos simulados autom√°ticamente: ${state.partidosSimulados.size}`);
    }
    
    console.log('');
    console.log('üîß Funcionalidades Disponibles:');
    console.log('  ‚úÖ Simulaci√≥n autom√°tica con guardado de resultados');
    console.log('  ‚úÖ Simulaci√≥n en vivo con cronolog√≠a completa');
    console.log('  ‚úÖ Persistencia de datos entre sesiones');
    console.log('  ‚úÖ Estad√≠sticas detalladas por partido');
    console.log('  ‚úÖ Visualizaci√≥n de resultados hist√≥ricos');
    console.log('  ‚úÖ Navegaci√≥n a detalles completos de partidos');
    
    console.log('');
    console.log('üéØ Sistema listo para uso en producci√≥n');
  }
}

// Exportar instancia para uso global
export const resultsValidation = new ResultsValidationSystem();

// Hacer disponible en consola del navegador
if (typeof window !== 'undefined') {
  (window as Window & { 
    resultsValidation?: ResultsValidationSystem;
    validateResults?: () => Promise<void>;
    summaryResults?: () => void;
  }).resultsValidation = resultsValidation;
  
  (window as Window & { 
    validateResults?: () => Promise<void>;
  }).validateResults = () => resultsValidation.executeFullValidation();
  
  (window as Window & { 
    summaryResults?: () => void;
  }).summaryResults = () => resultsValidation.generateSystemSummary();
}

// Funci√≥n de conveniencia para ejecutar desde consola
export const validateCompleteResultsSystem = () => {
  return resultsValidation.executeFullValidation();
};

export const getResultsSystemSummary = () => {
  return resultsValidation.generateSystemSummary();
};
