/**
 * Script para verificar y actualizar los datos de t√≠tulos y logros en el backend
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Datos de equipos con t√≠tulos y logros mejorados
const teamsData = [
  {
    id: 'gryffindor',
    name: 'Gryffindor',
    titles: 7,
    achievements: [
      "Campe√≥n de la Copa de las Casas (7 veces)",
      "R√©cord de la captura m√°s r√°pida de la Snitch Dorada",
      "Mayor n√∫mero de victorias consecutivas (23 partidos)",
      "Mejor comeback en una final",
      "Premio al Fair Play por excelencia deportiva"
    ]
  },
  {
    id: 'slytherin',
    name: 'Slytherin',
    titles: 6,
    achievements: [
      "Campe√≥n de Liga Intercasas (6 veces)",
      "R√©cord de mayor n√∫mero de t√≠tulos consecutivos (4)",
      "Estrategia defensiva m√°s efectiva",
      "Mayor porcentaje de victorias en finales",
      "Innovadores de formaciones t√°cticas"
    ]
  },
  {
    id: 'ravenclaw',
    name: 'Ravenclaw',
    titles: 4,
    achievements: [
      "Campe√≥n de Torneos Acad√©micos (4 veces)",
      "Creadores del Sistema de Vuelo Helicoidal",
      "Mayor n√∫mero de jugadas innovadoras",
      "R√©cord de precisi√≥n en pases",
      "Premio a la Excelencia T√°ctica"
    ]
  },
  {
    id: 'hufflepuff',
    name: 'Hufflepuff',
    titles: 3,
    achievements: [
      "Campe√≥n de Resistencia (3 veces)",
      "R√©cord de temporada sin derrotas en casa",
      "Mayor n√∫mero de remontadas exitosas",
      "Premio al Esp√≠ritu Deportivo",
      "Mejor cohesi√≥n de equipo"
    ]
  },
  {
    id: 'chudley',
    name: 'Chudley Cannons',
    titles: 1,
    achievements: [
      "Campe√≥n de Liga Profesional (1 vez)",
      "Mayor base de fan√°ticos leales",
      "R√©cord de asistencia en partidos locales",
      "Premio al Coraje Deportivo",
      "Mejor esp√≠ritu de superaci√≥n"
    ]
  },
  {
    id: 'harpies',
    name: 'Holyhead Harpies',
    titles: 8,
    achievements: [
      "Campeonas de Liga Femenina (8 veces)",
      "Primer equipo completamente femenino profesional",
      "R√©cord de t√≠tulos consecutivos",
      "Mejor porcentaje de victorias",
      "Inspiraci√≥n para el Quidditch femenino"
    ]
  }
];

async function updateTeamTitlesAndAchievements() {
  const dbPath = path.join(__dirname, 'backend', 'database', 'quidditch.db');
  
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.error('‚ùå Error opening database:', err);
        reject(err);
        return;
      }
      console.log('‚úÖ Connected to database');
    });
    
    // Funci√≥n para actualizar un equipo
    const updateTeam = (teamData) => {
      return new Promise((teamResolve, teamReject) => {
        const achievementsJson = JSON.stringify(teamData.achievements);
        
        db.run(
          `UPDATE teams SET 
           titles = ?, 
           achievements = ?,
           history = CASE 
             WHEN history IS NULL OR history = '' THEN 'This team has a rich history in Quidditch.'
             ELSE history 
           END
           WHERE id = ?`,
          [teamData.titles, achievementsJson, teamData.id],
          function(err) {
            if (err) {
              console.error(`‚ùå Error updating ${teamData.name}:`, err);
              teamReject(err);
            } else {
              console.log(`‚úÖ Updated ${teamData.name} - Titles: ${teamData.titles}, Achievements: ${teamData.achievements.length}`);
              teamResolve(this.changes);
            }
          }
        );
      });
    };
    
    // Actualizar todos los equipos
    Promise.all(teamsData.map(updateTeam))
      .then(() => {
        console.log('üéâ All teams updated successfully');
        
        // Verificar que los datos se guardaron correctamente
        db.all("SELECT id, name, titles, achievements FROM teams", (err, rows) => {
          if (err) {
            console.error('‚ùå Error verifying updates:', err);
            reject(err);
          } else {
            console.log('\nüìä Current team data:');
            rows.forEach(row => {
              const achievements = JSON.parse(row.achievements || '[]');
              console.log(`- ${row.name}: ${row.titles} t√≠tulos, ${achievements.length} logros`);
            });
            resolve(rows);
          }
          
          db.close();
        });
      })
      .catch((err) => {
        console.error('‚ùå Error in batch update:', err);
        db.close();
        reject(err);
      });
  });
}

// Funci√≥n para verificar la estructura de la tabla
function checkTableStructure() {
  const dbPath = path.join(__dirname, 'backend', 'database', 'quidditch.db');
  
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.error('‚ùå Error opening database:', err);
        reject(err);
        return;
      }
    });
    
    db.all("PRAGMA table_info(teams)", (err, columns) => {
      if (err) {
        console.error('‚ùå Error checking table structure:', err);
        reject(err);
      } else {
        console.log('üìã Teams table structure:');
        columns.forEach(col => {
          console.log(`- ${col.name}: ${col.type} (${col.notnull ? 'NOT NULL' : 'NULL'}) ${col.dflt_value ? `DEFAULT ${col.dflt_value}` : ''}`);
        });
        resolve(columns);
      }
      
      db.close();
    });
  });
}

// Ejecutar seg√∫n el argumento
if (process.argv[2] === '--check') {
  checkTableStructure();
} else {
  updateTeamTitlesAndAchievements();
}

module.exports = { updateTeamTitlesAndAchievements, checkTableStructure };
