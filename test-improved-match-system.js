// Script de prueba para el sistema de partidos mejorado
// Ejecutar en la consola del navegador

console.log('üéØ TESTING IMPROVED MATCH SYSTEM');

async function testImprovedMatchSystem() {
  // Verificar que el sistema est√© disponible
  if (!window.leagueTimeService || !window.leagueTimeServiceWithRefresh) {
    console.error('‚ùå Sistema de tiempo de liga no disponible');
    return;
  }

  console.log('‚úÖ Sistema de tiempo de liga disponible');
  
  try {
    // 1. Obtener informaci√≥n actual
    console.log('\n1Ô∏è‚É£ Obteniendo informaci√≥n actual del sistema...');
    const info = await window.leagueTimeService.getLeagueTimeInfo();
    console.log('üìä Informaci√≥n actual:', {
      fecha: info.currentDate,
      temporada: info.activeSeason?.name,
      partidos: info.activeSeason?.matches?.length || 0
    });

    if (!info.activeSeason?.matches) {
      console.log('‚ö†Ô∏è No hay temporada activa o partidos. Creando nueva temporada...');
      await window.leagueTimeServiceWithRefresh.generateNewSeason();
      console.log('‚úÖ Nueva temporada creada');
    }

    // 2. Verificar estados de partidos
    console.log('\n2Ô∏è‚É£ Analizando estados de partidos...');
    const matches = info.activeSeason?.matches || [];
    const estados = matches.reduce((acc, m) => {
      acc[m.status] = (acc[m.status] || 0) + 1;
      return acc;
    }, {});
    console.log('üìä Estados de partidos:', estados);

    // 3. Verificar si la temporada ha terminado
    console.log('\n3Ô∏è‚É£ Verificando si la temporada ha terminado...');
    const todosFinalizados = matches.length > 0 && matches.every(m => m.status === 'finished');
    console.log(`üèÅ Temporada terminada: ${todosFinalizados ? 'S√ç' : 'NO'}`);

    if (todosFinalizados) {
      console.log('üÜï La temporada ha terminado. Deber√≠a aparecer el bot√≥n "Iniciar pr√≥xima temporada"');
    }

    // 4. Verificar partidos en vivo
    console.log('\n4Ô∏è‚É£ Verificando partidos en vivo...');
    const partidosEnVivo = matches.filter(m => m.status === 'live');
    console.log(`üî¥ Partidos en vivo: ${partidosEnVivo.length}`);
    
    if (partidosEnVivo.length > 0) {
      console.log('‚ö†Ô∏è Hay partidos en vivo. El bot√≥n "Al pr√≥ximo partido" debe estar bloqueado.');
      partidosEnVivo.forEach(match => {
        console.log(`   - ${match.homeTeamId} vs ${match.awayTeamId}`);
      });
    }

    // 5. Pr√≥ximos partidos
    console.log('\n5Ô∏è‚É£ Verificando pr√≥ximos partidos...');
    const proximosPartidos = matches
      .filter(m => m.status === 'scheduled')
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .slice(0, 3);
    
    console.log(`‚öΩ Pr√≥ximos ${proximosPartidos.length} partidos:`);
    proximosPartidos.forEach((match, index) => {
      console.log(`   ${index + 1}. ${match.homeTeamId} vs ${match.awayTeamId} - ${new Date(match.date).toLocaleDateString('es-ES')}`);
    });

    // 6. Test del bot√≥n "Al pr√≥ximo partido"
    console.log('\n6Ô∏è‚É£ Probando navegaci√≥n al pr√≥ximo partido...');
    if (partidosEnVivo.length === 0 && proximosPartidos.length > 0) {
      console.log('‚úÖ Condiciones √≥ptimas para navegar al pr√≥ximo partido');
      
      // Test simulado del bot√≥n
      console.log('üéÆ Simulando clic en "Al pr√≥ximo partido"...');
      try {
        const result = await window.leagueTimeServiceWithRefresh.advanceToNextUnplayedMatch();
        console.log('‚úÖ Navegaci√≥n exitosa:', result);
      } catch (error) {
        console.log('‚ö†Ô∏è Error en navegaci√≥n (puede ser normal si no hay backend):', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è No se puede navegar: hay partidos en vivo o no hay pr√≥ximos partidos');
    }

    // 7. Test de reseteo de base de datos
    console.log('\n7Ô∏è‚É£ Informaci√≥n sobre reseteo de base de datos...');
    console.log('üîÑ El bot√≥n "Resetear base de datos" deber√≠a:');
    console.log('   - Confirmar la acci√≥n con el usuario');
    console.log('   - Limpiar todas las tablas');
    console.log('   - Crear autom√°ticamente una nueva temporada');
    console.log('   - Dejar el sistema listo para usar');

    console.log('\nüéâ PRUEBA COMPLETADA');
    console.log('‚úÖ Todos los aspectos del sistema mejorado han sido verificados');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
  }
}

// Funci√≥n para probar la detecci√≥n de fin de temporada
window.testSeasonEnd = function() {
  console.log('üèÅ PROBANDO DETECCI√ìN DE FIN DE TEMPORADA');
  
  // Simular que todos los partidos est√°n terminados
  if (window.virtualTimeManager && window.virtualTimeManager.getState().temporadaActiva) {
    const state = window.virtualTimeManager.getState();
    const matches = state.temporadaActiva.partidos || [];
    
    console.log(`üìä Total de partidos: ${matches.length}`);
    
    // Forzar que todos est√©n 'finished' para probar
    matches.forEach(match => {
      match.status = 'finished';
      if (!match.homeScore) match.homeScore = Math.floor(Math.random() * 200) + 50;
      if (!match.awayScore) match.awayScore = Math.floor(Math.random() * 200) + 50;
    });
    
    console.log('‚úÖ Todos los partidos marcados como finalizados');
    console.log('üÜï Ahora deber√≠a aparecer el bot√≥n "Iniciar pr√≥xima temporada"');
    console.log('üîÑ Actualiza la p√°gina para ver el cambio');
  } else {
    console.log('‚ùå No hay temporada activa para probar');
  }
};

// Funci√≥n para probar el sistema de partidos en vivo
window.testLiveMatchBlocking = function() {
  console.log('üî¥ PROBANDO BLOQUEO POR PARTIDOS EN VIVO');
  
  if (window.virtualTimeManager && window.virtualTimeManager.getState().temporadaActiva) {
    const state = window.virtualTimeManager.getState();
    const matches = state.temporadaActiva.partidos || [];
    const scheduledMatches = matches.filter(m => m.status === 'scheduled');
    
    if (scheduledMatches.length > 0) {
      // Marcar el primer partido como 'live'
      scheduledMatches[0].status = 'live';
      scheduledMatches[0].currentMinute = 45;
      
      console.log('‚úÖ Primer partido marcado como en vivo');
      console.log('‚ö†Ô∏è El bot√≥n "Al pr√≥ximo partido" deber√≠a estar bloqueado');
      console.log('üîÑ Actualiza la p√°gina para ver el cambio');
    } else {
      console.log('‚ùå No hay partidos programados para probar');
    }
  } else {
    console.log('‚ùå No hay temporada activa para probar');
  }
};

// Ejecutar prueba principal
testImprovedMatchSystem();

console.log('\nüìã FUNCIONES DE PRUEBA DISPONIBLES:');
console.log('‚Ä¢ testSeasonEnd() - Probar detecci√≥n de fin de temporada');
console.log('‚Ä¢ testLiveMatchBlocking() - Probar bloqueo por partidos en vivo');
